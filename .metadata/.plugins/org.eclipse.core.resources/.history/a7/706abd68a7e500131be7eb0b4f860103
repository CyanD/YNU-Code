/**
 * 一副扑克牌
 */

/**
 * @author HYC
 * 
 */
public class Deck {
	Card[] cards;

	/**
	 * 空构造方法，生成52张扑克牌
	 */
	public Deck() {
		this.cards = new Card[52];
		int index = 0;
		while (index < 52) {
			for (int suit = 0; suit <= 3; suit++) {
				for (int rank = 1; rank <= 13; rank++) {
					this.cards[index] = new Card(suit, rank);
					index++;
				}
			}
		}
	}

	public Deck(int n) {
		this.cards = new Card[n];
	}

	public void print() {
		for (int i = 0; i < cards.length; i++) {
			cards[i].print();
		}
	}

	public int length() {
		return cards.length;
	}

	// 为简单运算，暂时先不考虑235的情况，
	// 基本顺序：single< pair< straight< flush< straight flush< boss
	public int compareSubDeckTo(Deck subDeck) {
		int mark;
		mark = encodeToNumb(this) - encodeToNumb(subDeck);
		if (mark > 0) {
			return 1;
		}
		if (mark < 0) {
			return -1;
		}
		// 为同类型牌时
		this.sort();
		subDeck.sort();
		switch (encodeToNumb(this)) {
		case 1:// 都为单牌
			if (this.cards[2].rank > subDeck.cards[2].rank)
				return 1;
			if (this.cards[2].rank < subDeck.cards[2].rank)
				return -1;
			// 最大牌相同情况，比较次大牌
			if (this.cards[1].rank > subDeck.cards[1].rank)
				return 1;
			if (this.cards[1].rank < subDeck.cards[1].rank)
				return -1;
			// 次大牌也相同时，则比较最小牌
			if (this.cards[0].rank > subDeck.cards[0].rank)
				return 1;
			if (this.cards[0].rank < subDeck.cards[0].rank)
				return -1;
			return 0;// 全部牌点数相同，则认为一样大
		case 2:// 都为对子
			break;
		case 3:// 都为顺子
			break;
		case 4:// 都是同花
			break;
		case 5:// 都是同花顺
			break;
		case 6:// 都是炸弹
			break;
		}
		return 0;
	}

	private static Card[] findPairCardandSingleInPairs(Deck d) {
		Card[] c = new Card[2];
		c[0] = d.cards[0];
		c[1] = d.cards[1];
		c[2] = d.cards[2];
		Card[] result=new Card[1];

	}

	private static int encodeToNumb(Deck cards) {
		if (cards.isSingle())
			return 1;
		if (cards.isPair())
			return 2;
		if (cards.isStraight())
			return 3;
		if (cards.isFlush())
			return 4;
		if (cards.isStraighFlush())
			return 5;
		if (cards.isBoss())
			return 6;
		return -1;
	}

	// 判断是否为单牌
	public boolean isSingle() {
		if (!this.isBoss() && !this.isFlush() && !this.isPair()
				&& !this.isStraighFlush() && !this.isStraight())
			return true;
		else
			return false;
	}

	// 判断是否为对牌
	public boolean isPair() {
		int edge = 0;
		if (this.cards[0].compareTo(this.cards[1]) == 0)
			edge++;
		if (this.cards[0].compareTo(this.cards[2]) == 0)
			edge++;
		if (this.cards[1].compareTo(this.cards[2]) == 0)
			edge++;
		if (edge == 1)
			return true;
		else
			return false;
	}

	private void sort() {
		// 排序
		Card t;
		if (this.cards[0].rank > this.cards[1].rank) {
			t = this.cards[0];
			this.cards[0] = this.cards[1];
			this.cards[1] = t;
		}
		if (this.cards[1].rank > this.cards[2].rank) {
			t = this.cards[1];
			this.cards[1] = this.cards[2];
			this.cards[2] = t;
		}
		if (this.cards[0].rank > this.cards[1].rank) {
			t = this.cards[0];
			this.cards[0] = this.cards[1];
			this.cards[1] = t;
		}
	}

	// 判断是否为顺子
	public boolean isStraight() {
		// 先排序，从小到大的顺序
		this.sort();
		// 在判断是否为共差为1的等差数列或者是QKA顺序
		if ((this.cards[2].rank - this.cards[1].rank == 1)
				&& (this.cards[1].rank - this.cards[0].rank == 1))
			return true;
		else {
			if ((this.cards[0].rank == 1) && (this.cards[1].rank == 12)
					&& (this.cards[0].rank == 13))
				return true;
			else
				return false;
		}
	}

	// 判断是否为金花、同花
	public boolean isFlush() {
		if (this.cards[0].suit == this.cards[1].suit
				&& this.cards[1].suit == this.cards[2].suit)
			return true;
		else
			return false;
	}

	// 判断是否为同花顺
	public boolean isStraighFlush() {
		if (this.isFlush() && this.isStraight())
			return true;
		else
			return false;
	}

	// 判断是否为炸弹
	public boolean isBoss() {
		if (this.cards[0].compareTo(this.cards[1]) == 0
				&& this.cards[1].compareTo(this.cards[2]) == 0)
			return true;
		else
			return false;
	}
}
